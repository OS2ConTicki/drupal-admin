<?php

namespace Drupal\os2conticki_content\Plugin\Field\FieldWidget;

use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Field\WidgetBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
use Drupal\Core\Render\ElementInfoManagerInterface;
use Drupal\image\Plugin\Field\FieldWidget\ImageWidget;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * Plugin implementation of the 'os2conticki_conference_app_data_widget' widget.
 *
 * @FieldWidget(
 *   id = "os2conticki_conference_app_data_widget",
 *   module = "os2conticki_content",
 *   label = @Translation("Conference app data"),
 *   field_types = {
 *     "os2conticki_conference_app_data"
 *   }
 * )
 */
class ConferenceAppDataWidget extends WidgetBase implements ContainerFactoryPluginInterface {
// @see https://ixis.co.uk/blog/drupal-8-creating-field-types-multiple-values

  /**
   * @var \Drupal\Core\Render\ElementInfoManagerInterface*/
  private $elementInfo;

  /**
   * {@inheritdoc}
   */
  public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, ElementInfoManagerInterface $elementInfo) {
    parent::__construct($plugin_id, $plugin_definition, $field_definition, $settings, $third_party_settings);
    $this->elementInfo = $elementInfo;
  }

  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
    return new static($plugin_id, $plugin_definition, $configuration['field_definition'], $configuration['settings'], $configuration['third_party_settings'], $container->get('element_info'));
  }

  /**
   *
   */
  protected function formMultipleElements(
    FieldItemListInterface $items,
    array &$form,
    FormStateInterface $form_state
  ) {
    return parent::formMultipleElements($items, $form,
    // TODO: Change the autogenerated stub.
      $form_state);
  }

  /**
   *
   */
  public function formElement(
    FieldItemListInterface $items,
    $delta,
    array $element,
    array &$form,
    FormStateInterface $form_state
  ) {
    /** @var \Drupal\os2conticki_content\Plugin\Field\FieldType\ConferenceAppDataItem $item */
    $item = $items[$delta];

    // $element = [];
    $element_info = $this->elementInfo->getInfo('managed_file');

    // $element['app_data'] = [
    //      '#type' => 'fieldset',
    //      '#title' => $this->t('App data'),
    // '#submit' => '::submit',
    //    ];
    $cardinality = 1;
    $element['app_logo'] = [
      '#type' => 'managed_file',
      '#upload_location' => 'public://images',
      '#upload_validators' => [
        'file_validate_extensions' => ['png jpg'],
        'file_validate_image_resolution' => ['800x600', '400x300'],
      ],
      '#description' => $this->t('App logo'),
      '#value_callback' => [get_class($this), 'imageValue'],
      '#process' => array_merge($element_info['#process'], [[get_class($this), 'process']]),

      '#submit' => [[get_class($this), 'submit']],

        // Make ImageWidget::process happy.
      '#preview_image_style' => 'thumbnail',
      '#title_field' => FALSE,
      '#title_field_required' => FALSE,
      '#alt_field' => FALSE,
      '#alt_field_required' => FALSE,

        // Make FileWidget::process happy.
      '#display_field' => FALSE,
      '#description_field' => NULL,
      '#cardinality' => $cardinality,

      '#title' => t('App logo'),
      '#default_value' => [
      // 'fids' => 1,
          // $item->app_logo ?? '',
        ],
      '#multiple' => 1 !== $cardinality,
    ] + $element_info;

    // header('content-type: text/plain'); echo var_export($element_info, true); die(__FILE__.':'.__LINE__.':'.__METHOD__);
    //    header('content-type: text/plain'); echo var_export($element, true); die(__FILE__.':'.__LINE__.':'.__METHOD__);.
    $file_upload_help = [
      '#theme' => 'file_upload_help',
      '#description' => $element['app_logo']['#description'],
      '#upload_validators' => $element['app_logo']['#upload_validators'],
      '#cardinality' => $cardinality,
    ];
    $element['app_logo']['#description'] = \Drupal::service('renderer')->renderPlain($file_upload_help);

    // $element['custom_app_url'] = [
    //      '#type' => 'textfield',
    //      '#title' => t('Custom app url'),
    //      '#default_value' => $item->custom_app_url ?? '',
    //      '#size' => 45,
    //    ];
    //    $element['google_analytics_id'] = [
    //      '#type' => 'textfield',
    //      '#title' => t('Google Analytics id'),
    //      '#default_value' => $item->google_analytics_id ?? '',
    //      '#size' => 45,
    //    ];
    // If cardinality is 1, ensure a label is output for the field by wrapping
    // it in a details element.
    if (1 === $this->fieldDefinition->getFieldStorageDefinition()->getCardinality()) {
      $element += [
        '#type' => 'fieldset',
        '#attributes' => ['class' => ['container-inline']],
      ];
    }

    // $element['#submit'][] = [get_class($this), 'submit'];
    return $element;
  }

  /**
   *
   */
  public static function process($element, FormStateInterface $form_state, $form) {
    return ImageWidget::process($element, $form_state, $form);
  }

  /**
   * Form API callback. Retrieves the value for the file_generic field element.
   *
   * This method is assigned as a #value_callback in formElement() method.
   */
  public static function imageValue($element, $input, FormStateInterface $form_state) {
    return ImageWidget::value($element, $input, $form_state);
  }

  /**
   *
   */
  public function massageFormValues(
    array $values,
    array $form,
    FormStateInterface $form_state
  ) {
    // Lifted from FileWidget::massageFormValues.
    // Since file upload widget now supports uploads of more than one file at a
    // time it always returns an array of fids. We have to translate this to a
    // single fid, as field expects single value.
    $new_values = [];
    foreach ($values as &$value) {
      foreach ($value['app_logo'] as $fid) {
        // $value['app_logo'] = $fid;
      }
    }

    return parent::massageFormValues($values, $form,
    // TODO: Change the autogenerated stub.
      $form_state);
  }

}
